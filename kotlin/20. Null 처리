# Null 처리

- sample?.funtion() : 참조연산자를 실행하기전에 먼저 객체가 null인지 확인부터하고 null이라면 구문을 실행하지 않는다
- sample?: "default" : null이 아니라면 그대로 사용 null이라면 연산자 우측의 값으로 대체됨
- samlple!!.funtion() : null 여부를 컴파일시 확인하지 않도록하여 런타임시 null pointer exception 이 나도록 의도적으로 방치하는 연산자

```kotlin

fun main() {
    var a: String? = null
    
    println(a?.toUpperCase())
    println(a?:"default".toUpperCase())
    
    println(a!!.toUpperCase())
    
}

```

```kotlin

fun main() {
    var a: String? = null
    
    a?.run{
        println(a.toUpperCase())
        println(a.toLowerCase())
    }
}

```

null을 체크하기 위해 if 대신 쓰이는 편리한 기능

# 동일성

- 내용의 동일성 : ==
- 객체의 동일성 : ===

커스텀클래스를 구현할때는 equals 를 오버라이드하여 사용해야함

```kotlin

fun main() {
	var a = Product("콜라", 1000)
   	var b = Product("콜라", 1000)
    var c = a
    var d = Product("사이다", 1000)
    
    println(a == b)
    println(a === b)
   
    println(a == c)
    println(a === c)
    
    println(a == d)
    println(a === d)
}

class Product(val name: String, val price: Int){
    override fun equals(other: Any?): Boolean{
        if(other is Product){
            return other.name == name && other.price == price
        } else{
            return false
        }
    }
}

```
